// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PropertyType {
  APPARTEMENT
  MAISON
  STUDIO
  LOFT
  LOCAL
}

enum ListingStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum LeaseType {
  VIDE
  MEUBLE
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      String?   // "owner" | "tenant" | autre
  listings  Listing[] @relation("OwnerListings")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Listing {
  id            String        @id @default(cuid())
  title         String
  description   String
  type          PropertyType
  leaseType     LeaseType
  city          String
  address       String?
  lat           Float?
  lng           Float?
  rent          Int            // en euros
  charges       Int            // en euros
  bedrooms      Int
  surface       Int            // m2
  furnished     Boolean        @default(false)
  status        ListingStatus  @default(PUBLISHED)
  availableAt   DateTime?

  ownerId       String
  owner         User           @relation("OwnerListings", fields: [ownerId], references: [id])

  images        ListingImage[]
  applications  Application[]
  visitSlots    VisitSlot[]    // relation avec les créneaux de visite

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status, city, type])
  @@index([rent])
  @@index([availableAt])
}

model ListingImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
  sort      Int     @default(0)
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  PREQUALIFIED   // scoring ok, peut réserver une visite
  REJECTED
  APPROVED       // final accepté par le proprio
}

enum DocumentStatus {
  PENDING
  VALID
  INVALID
}

enum DocumentType {
  IDENTITE
  JUSTIF_DOMICILE
  CONTRAT_TRAVAIL
  BULLETIN_SALAIRE_1
  BULLETIN_SALAIRE_2
  BULLETIN_SALAIRE_3
  AVIS_IMPOSITION
  ATTESTATION_ETUDIANT
  GARANT_IDENTITE
  GARANT_JUSTIF_DOMICILE
  GARANT_BULLETIN_1
  GARANT_BULLETIN_2
  GARANT_BULLETIN_3
  AUTRE
}

model Application {
  id          String            @id @default(cuid())
  listingId   String
  listing     Listing           @relation(fields: [listingId], references: [id])

  // champs “simples” de contact (optionnels si tu veux garder rétro-compatibilité)
  name        String?
  email       String?
  message     String?

  // nouveaux champs pour le vrai dossier
  applicantId String?           // Supabase Auth user id
  applicant   User?             @relation(fields: [applicantId], references: [id])
  status      ApplicationStatus @default(DRAFT)
  score       Int               @default(0)
  note        String?
  visitSlotId String?
  visitSlot   VisitSlot?        @relation(fields: [visitSlotId], references: [id])

  documents   ApplicationDocument[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([listingId, applicantId])
}

model ApplicationDocument {
  id            String         @id @default(cuid())
  applicationId String
  application   Application    @relation(fields: [applicationId], references: [id])

  type          DocumentType
  url           String
  status        DocumentStatus  @default(PENDING)
  reason        String?         // si INVALID : pourquoi

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model VisitSlot {
  id         String   @id @default(cuid())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])

  start      DateTime
  end        DateTime
  capacity   Int       @default(1)
  booked     Int       @default(0)

  applications Application[]

  createdAt  DateTime @default(now())

  @@index([listingId, start])
}
