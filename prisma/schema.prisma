// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums

enum PropertyType {
  APPARTEMENT
  MAISON
  STUDIO
  LOFT
  LOCAL
}

enum ListingStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum LeaseType {
  VIDE
  MEUBLE
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  PREQUALIFIED
  REJECTED
  APPROVED
}

enum DocumentStatus {
  PENDING
  VALID
  INVALID
}

enum DocumentType {
  IDENTITE
  JUSTIF_DOMICILE
  CONTRAT_TRAVAIL
  BULLETIN_SALAIRE_1
  BULLETIN_SALAIRE_2
  BULLETIN_SALAIRE_3
  AVIS_IMPOSITION
  ATTESTATION_ETUDIANT
  GARANT_IDENTITE
  GARANT_JUSTIF_DOMICILE
  GARANT_BULLETIN_1
  GARANT_BULLETIN_2
  GARANT_BULLETIN_3
  AUTRE
}

// --- Nouveaux enums Abonnement ---
enum Plan {
  STARTER      // gratuit (ton ‚ÄúGratuit‚Äù)
  PRO          // ‚ÄúPropri√©taire‚Äù
  PREMIUM
  BUSINESS
  ENTERPRISE
}

enum SubscriptionStatus {
  PENDING_PAYMENT
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
}

// Models

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String?
  role      String?
  listings  Listing[] @relation("OwnerListings")
  applicationsApplied Application[] @relation("ApplicantApplications")

  // üëá relation abonnement
  subscriptions Subscription[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Listing {
  id            String        @id @default(cuid())
  title         String
  description   String
  type          PropertyType
  leaseType     LeaseType
  city          String
  address       String?
  lat           Float?
  lng           Float?
  rent          Int
  charges       Int
  bedrooms      Int
  surface       Int
  furnished     Boolean        @default(false)
  status        ListingStatus  @default(PUBLISHED)
  availableAt   DateTime?

  ownerId       String
  owner         User           @relation("OwnerListings", fields: [ownerId], references: [id])

  images        ListingImage[]
  applications  Application[]
  visitSlots    VisitSlot[]

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([status, city, type])
  @@index([rent])
  @@index([availableAt])
}

model ListingImage {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  listingId String
  listing   Listing @relation(fields: [listingId], references: [id])
  sort      Int     @default(0)
}

model Application {
  id          String            @id @default(cuid())
  listingId   String
  listing     Listing           @relation(fields: [listingId], references: [id])

  name        String?
  email       String?
  message     String?

  applicantId String?
  applicant   User?             @relation("ApplicantApplications", fields: [applicantId], references: [id])

  status      ApplicationStatus @default(DRAFT)
  score       Int               @default(0)
  note        String?

  visitSlotId String?
  visitSlot   VisitSlot?        @relation(fields: [visitSlotId], references: [id])

  documents   ApplicationDocument[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@index([listingId, applicantId])
}

model ApplicationDocument {
  id            String         @id @default(cuid())
  applicationId String
  application   Application    @relation(fields: [applicationId], references: [id])

  type          DocumentType
  url           String
  status        DocumentStatus  @default(PENDING)
  reason        String?

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model VisitSlot {
  id         String   @id @default(cuid())
  listingId  String
  listing    Listing  @relation(fields: [listingId], references: [id])

  start      DateTime
  end        DateTime
  capacity   Int       @default(1)
  booked     Int       @default(0)

  applications Application[]

  createdAt  DateTime @default(now())

  @@index([listingId, start])
}

// --- Nouveau mod√®le Abonnement ---
model Subscription {
  id               String              @id @default(cuid())
  userId           String
  user             User                @relation(fields: [userId], references: [id])
  plan             Plan
  status           SubscriptionStatus  @default(PENDING_PAYMENT)
  currentPeriodEnd DateTime?           // pour ACTIVE/TRIALING
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  @@index([userId, status])
}
